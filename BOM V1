*&---------------------------------------------------------------------*
*& Report ZTEST_BOM_RNP
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztest_bom_rnp.
TABLES: mara,marc.

TYPES : BEGIN OF ty_tab,
          matnr TYPE mara-matnr,
          werks TYPE mast-werks,
          stlan TYPE mast-stlan,
          stlnr TYPE mast-stlnr,
          stlal TYPE mast-stlal,
        END OF ty_tab.

TYPES : BEGIN OF ty_rout,
          item_matnr TYPE mara-matnr,
          plnnr      TYPE plnnr,
        END OF ty_rout.

DATA: it_tab  TYPE STANDARD TABLE OF ty_tab,
      wa_tab  TYPE ty_tab,
      gt_rout TYPE STANDARD TABLE OF ty_rout,
      wa_rout TYPE ty_rout.

TYPES : BEGIN OF ty_stb.
          INCLUDE STRUCTURE stpox.
TYPES: END OF ty_stb.

DATA : it_stb         TYPE STANDARD TABLE OF ty_stb,
       ls_bom_exp_hdr TYPE cscmat,
       wa_stb         TYPE ty_stb,
       fs_stb         TYPE ty_stb.

TYPES : BEGIN OF ty_stb1,
          matnr TYPE mara-matnr,
          ojtxb TYPE ojtxp,
          mtart TYPE mtart,
          mnglg TYPE cs_e_mnglg,
          meins TYPE meins,
          idnrk TYPE matnr,
          ojtxp TYPE ojtxp,
        END OF ty_stb1.

DATA : it_stb1    TYPE STANDARD TABLE OF ty_stb1,
       wa_stb1    TYPE ty_stb1,
       fs_stb1    TYPE ty_stb1,
       gv_counter TYPE stlan.

TYPES: BEGIN OF ty_final,
         head_matnr TYPE mara-matnr,
         ojtxb      TYPE ojtxp,
         stlan      TYPE stlan,
         mtart      TYPE mtart,
         mnglg      TYPE cs_e_mnglg,
         mnglg1     TYPE cs_e_mnglg,
         meins      TYPE meins,
         item_matnr TYPE matnr,
         ojtxp      TYPE ojtxp,
         plnnr      TYPE plnnr,
       END OF ty_final.

DATA : it_final TYPE STANDARD TABLE OF ty_final,
       wa_final TYPE ty_final.
*       it_final1 TYPE STANDARD TABLE OF ZBI_MATBOM,
*       wa_final1 TYPE ZBI_MATBOM.

TYPE-POOLS: slis.
DATA: fieldcatalog TYPE slis_t_fieldcat_alv WITH HEADER LINE,
      gd_repid     LIKE sy-repid.


* *Screen elements................................
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS : s_matnr FOR mara-matnr ,
                   s_werks FOR marc-werks NO INTERVALS.
  PARAMETERS:
*s_matnr type mast-matnr default '' obligatory," Material Number
*s_werks type mast-werks default 'P001' obligatory, " Plant
    p_stlan TYPE mast-stlan DEFAULT '1' OBLIGATORY, " Alternative BOM
    p_capid TYPE rc29l-capid DEFAULT 'PP01' . " Application
SELECTION-SCREEN END OF BLOCK b1.

PARAMETERS:r_dis RADIOBUTTON GROUP a DEFAULT 'X', " Display
           r_upd RADIOBUTTON GROUP a, "Update
           r_del RADIOBUTTON GROUP a. "Truncate Data

START-OF-SELECTION.

  IF r_del IS NOT INITIAL.
    PERFORM delete_bom_data.
  ENDIF.

  PERFORM bom_header.
  PERFORM bom_child.

  IF r_dis IS NOT INITIAL.
    PERFORM build_catalog.
    PERFORM display_output.

  ELSEIF r_upd IS NOT INITIAL.
    PERFORM update_bom_data.
  ENDIF.


*&---------------------------------------------------------------------*
*&      Form  DELETE_BOM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM delete_bom_data .
  CALL FUNCTION 'DB_TRUNCATE_TABLE'
    EXPORTING
      tabname = 'ZBI_MATBOM'.
  COMMIT WORK.
ENDFORM.      " DELETE_BOM_DATA

*&---------------------------------------------------------------------*
*&      Form  UPDATE_BOM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM update_bom_data .
*  CLEAR wa_final1.
*  LOOP AT it_final INTO wa_final.
*    MOVE-CORRESPONDING wa_final TO wa_final1.
*    APPEND wa_final1 TO it_final1.
*  ENDLOOP.
*
*  MODIFY  zbi_matbom FROM TABLE it_final1.
*
*  COMMIT WORK.
ENDFORM.                    " UPDATE_BOM_DATA

*&---------------------------------------------------------------------*
*& Form BOM_HEADER
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM bom_header .

  SELECT matnr werks stlan stlnr stlal FROM mast
  INTO CORRESPONDING FIELDS OF TABLE it_tab
  WHERE matnr IN s_matnr AND
  werks IN s_werks AND
  stlan = p_stlan.

  CLEAR wa_tab.

  LOOP AT it_tab INTO wa_tab.

    CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
      EXPORTING
        capid                 = 'PP01'
        datuv                 = sy-datum
        mktls                 = 'X'
        mtnrv                 = wa_tab-matnr
        stlal                 = wa_tab-stlal
        stlan                 = wa_tab-stlan
        stpst                 = 0
        svwvo                 = 'X'
        werks                 = wa_tab-werks
      TABLES
        stb                   = it_stb
*MATCAT = ls_bom_exp_hdr
      EXCEPTIONS
        alt_not_found         = 1
        call_invalid          = 2
        material_not_found    = 3
        missing_authorization = 4
        no_bom_found          = 5
        no_plant_data         = 6
        no_suitable_bom_found = 7
        conversion_error      = 8
        OTHERS                = 9.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    CLEAR: wa_stb1 , wa_stb.

    LOOP AT it_stb INTO wa_stb.
      wa_stb1-matnr = wa_tab-matnr.
      wa_stb1-ojtxb = wa_stb-ojtxb.
      wa_stb1-mtart = wa_stb-mtart.
      wa_stb1-mnglg = wa_stb-mnglg.
      wa_stb1-meins = wa_stb-meins.
      wa_stb1-idnrk = wa_stb-idnrk.
      wa_stb1-ojtxp = wa_stb-ojtxp.
      APPEND wa_stb1 TO it_stb1.

    ENDLOOP.

  ENDLOOP.

ENDFORM. " BOM_HEADER
*&---------------------------------------------------------------------*
*& Form BOM_CHILD
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM bom_child .
  CLEAR fs_stb1.
  IF it_stb1 IS NOT INITIAL.

    gv_counter = gv_counter + 1.

    LOOP AT it_stb1 INTO fs_stb1.
      IF sy-subrc = 0.

        wa_final-head_matnr = fs_stb1-matnr.
        wa_final-ojtxb = fs_stb1-ojtxb.
        wa_final-stlan = gv_counter.
        wa_final-mtart = fs_stb1-mtart.
        wa_final-mnglg = fs_stb1-mnglg.
        wa_final-mnglg1 = fs_stb1-mnglg.
        wa_final-meins = fs_stb1-meins.
        wa_final-item_matnr = fs_stb1-idnrk.
        wa_final-ojtxp = fs_stb1-ojtxp.
        APPEND wa_final TO it_final.
      ENDIF.

    ENDLOOP.
  ENDIF.

  CLEAR wa_final.

  LOOP AT it_final INTO wa_final.
    PERFORM recursive_bom .
  ENDLOOP.

  PERFORM fill_rout.

ENDFORM. " BOM_CHILD

FORM recursive_bom .

  CLEAR : it_tab, it_stb , it_stb1.
  CLEAR : fs_stb,fs_stb1,wa_tab.
  SELECT matnr werks stlan stlnr stlal FROM mast
  INTO CORRESPONDING FIELDS OF TABLE it_tab
  WHERE matnr = wa_final-item_matnr AND
  werks IN s_werks AND
  stlan = p_stlan.

  DATA(lv_qty) = wa_final-mnglg.

  LOOP AT it_tab INTO wa_tab.
    CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
      EXPORTING
        capid                 = 'PP01'
        datuv                 = sy-datum
        mktls                 = 'X'
        mtnrv                 = wa_tab-matnr
        stlal                 = wa_tab-stlal
        stlan                 = wa_tab-stlan
        stpst                 = 0
        svwvo                 = 'X'
        werks                 = wa_tab-werks
      TABLES
        stb                   = it_stb
      EXCEPTIONS
        alt_not_found         = 1
        call_invalid          = 2
        material_not_found    = 3
        missing_authorization = 4
        no_bom_found          = 5
        no_plant_data         = 6
        no_suitable_bom_found = 7
        conversion_error      = 8
        OTHERS                = 9.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    CLEAR: wa_stb1, wa_stb.


    LOOP AT it_stb INTO wa_stb.
      wa_stb1-matnr = wa_tab-matnr.
      wa_stb1-ojtxb = wa_stb-ojtxb.
      wa_stb1-mtart = wa_stb-mtart.
      wa_stb1-mnglg = wa_stb-mnglg.
      wa_stb1-meins = wa_stb-meins.
      wa_stb1-idnrk = wa_stb-idnrk.
      wa_stb1-ojtxp = wa_stb-ojtxp.
      APPEND wa_stb1 TO it_stb1.
    ENDLOOP.

    gv_counter = gv_counter + 1.

    LOOP AT it_stb1 INTO fs_stb1.
      IF sy-subrc = 0.
        wa_final-head_matnr = fs_stb1-matnr.
        wa_final-ojtxb = fs_stb1-ojtxb.
        wa_final-stlan = gv_counter.
        wa_final-mtart = fs_stb1-mtart.
        wa_final-mnglg = fs_stb1-mnglg.
        wa_final-mnglg1 = fs_stb1-mnglg * lv_qty.
        wa_final-meins = fs_stb1-meins.
        wa_final-item_matnr = fs_stb1-idnrk.
        wa_final-ojtxp = fs_stb1-ojtxp.
        APPEND wa_final TO it_final.
      ENDIF.
    ENDLOOP.

  ENDLOOP.

ENDFORM. " RECURSIVE_BOM
*&---------------------------------------------------------------------*
*& Form BUILD_CATALOG
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM build_catalog .
  fieldcatalog-fieldname = 'HEAD_MATNR'.
  fieldcatalog-seltext_m = 'FG/ Parent'.
  fieldcatalog-col_pos = 0.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'ITEM_MATNR'.
  fieldcatalog-seltext_m = 'Component'.
  fieldcatalog-col_pos = 1.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'STLAN'.
  fieldcatalog-seltext_m = 'Level'.
  fieldcatalog-col_pos = 2.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'MTART'.
  fieldcatalog-seltext_m = 'Material Type'.
  fieldcatalog-col_pos = 3.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'OJTXB'.
  fieldcatalog-seltext_m = 'FG/ Parent Desc'.
  fieldcatalog-col_pos = 4.
  fieldcatalog-outputlen = 40.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'MNGLG1'.
  fieldcatalog-seltext_m = 'Total Quantity'.
  fieldcatalog-col_pos = 5.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'MNGLG'.
  fieldcatalog-seltext_m = 'Quantity Required'.
  fieldcatalog-col_pos = 6.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'MEINS'.
  fieldcatalog-seltext_m = 'Unit Of Measure'.
  fieldcatalog-col_pos = 7.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'OJTXP'.
  fieldcatalog-seltext_m = 'Component Desc'.
  fieldcatalog-col_pos = 8.
  fieldcatalog-outputlen = 40.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

  fieldcatalog-fieldname = 'PLNNR'.
  fieldcatalog-seltext_m = 'Routing Number'.
  fieldcatalog-col_pos = 9.
  fieldcatalog-outputlen = 40.
  APPEND fieldcatalog TO fieldcatalog.
  CLEAR fieldcatalog.

ENDFORM. " BUILD_CATALOG
*&---------------------------------------------------------------------*

*& Form DISPLAY_OUTPUT
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM display_output .
  gd_repid = sy-repid.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = gd_repid
      it_fieldcat        = fieldcatalog[]
*     i_callback_top_of_page = 'TOP-OF-PAGE'
      i_save             = 'X'
*     IS_VARIANT         = g_variant
    TABLES
      t_outtab           = it_final
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_rout
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_rout .

  MOVE-CORRESPONDING it_final TO gt_rout.
  DELETE  ADJACENT DUPLICATES FROM gt_rout COMPARING item_matnr.

  SELECT
    matnr,
    plnnr
    FROM mapl
    INTO TABLE @DATA(lt_rout)
    FOR ALL ENTRIES IN @gt_rout
    WHERE matnr = @gt_rout-item_matnr.

  IF sy-subrc IS INITIAL.
    LOOP AT it_final ASSIGNING FIELD-SYMBOL(<lfs_final>).
      IF <lfs_final> IS ASSIGNED.
        READ TABLE lt_rout INTO wa_rout WITH KEY matnr = <lfs_final>-item_matnr.
        IF sy-subrc is INITIAL.
          <lfs_final>-plnnr = wa_rout-plnnr.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
